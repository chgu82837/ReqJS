// Generated by LiveScript 1.2.0
(function(){
  'use strict';
  window.Req = function(reqs, whenCompleteAllReq, info, dontFireAtOnce){
    var instance, failSignal, successSignal, warn, typeProcessor, XHR, reqQueue;
    reqs == null && (reqs = {
      'jsPoweredByJQuery': [
        {
          name: 'jQuery',
          url: '//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js',
          type: 'js',
          success: function(){
            return console.log("jquery OK!");
          },
          fail: function(){},
          test: function(){
            return deepEq$(typeof $, 'function', '===') && deepEq$(typeof $.fn.jquery, 'string', '===');
          }
        }, {
          name: 'bootstrap',
          url: '//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js',
          type: 'js',
          success: function(){
            return console.log("bootstrap OK!");
          }
        }
      ],
      'bootstrapCSS': [{
        url: '//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css',
        type: 'css',
        success: function(){
          return console.log("bootstrapCSS OK!");
        }
      }]
    });
    whenCompleteAllReq == null && (whenCompleteAllReq = function(){});
    info == null && (info = false);
    dontFireAtOnce == null && (dontFireAtOnce = false);
    instance = {
      reqs: reqs
    };
    reqs = instance.reqs;
    failSignal = "{`F`}";
    successSignal = "{`OK`}";
    info = info && console.log
      ? function(msg, title){
        if (title) {
          return console.log("[ Req:" + title + " ] => " + msg);
        } else {
          return console.log(msg);
        }
      }
      : function(){};
    warn = function(msg, title){
      if (title) {
        return console.log("[ Req:" + title + " ] => " + msg);
      } else {
        return console.log(msg);
      }
    };
    typeProcessor = {
      unknown: function(data, name){
        return data;
      },
      js: function(data, name){
        var JS;
        JS = document.createElement('script');
        JS.innerHTML = data;
        JS.setAttribute("class", "js_added_by_req");
        JS.setAttribute("id", "JS_" + name);
        info("[ js:" + name + " ] => inserting into document...");
        document.getElementsByTagName('head')[0].appendChild(JS);
        return JS;
      },
      css: function(data, name){
        var CSS;
        CSS = document.createElement('style');
        CSS.innerHTML = data;
        CSS.setAttribute("class", "css_added_by_req");
        CSS.setAttribute("id", "CSS_" + name);
        info("[ css:" + name + " ] => inserting into document...");
        document.getElementsByTagName('head')[0].appendChild(CSS);
        return CSS;
      },
      json: function(data, name){
        var error;
        try {
          return (JSON && JSON.parse(data)) || eval(data);
        } catch (e$) {
          error = e$;
          message("[ json:" + name + " ] => parsing failed! Exception:");
          warn(error, true);
          return failSignal;
        }
      }
    };
    instance.hasXDomainRequest = typeof XDomainRequest !== 'undefined';
    instance.xhrMethods = ["XDomainRequest()", "ActiveXObject(\"Msxml2.XMLHTTP.3.0\")", "ActiveXObject(\"Msxml2.XMLHTTP.6.0\")", "XMLHttpRequest()", "ActiveXObject(\"Microsoft.XMLHTTP\")"];
    XHR = instance.XHR = function(URL, whenSuccess, whenFail, whenEnd, name, tag){
      var funTitle, aFailure, aSuccess, readystatechangeHandler, crossDomain, request;
      URL == null && (URL = failSignal);
      whenSuccess == null && (whenSuccess = function(){});
      whenFail == null && (whenFail = function(){});
      whenEnd == null && (whenEnd = function(){});
      name == null && (name = failSignal);
      tag == null && (tag = false);
      if (URL === failSignal) {
        throw "xhr require URL parameter!";
      }
      if (name === failSignal) {
        name = "{" + URL + "}";
      }
      funTitle = 'XHR';
      aFailure = function(){
        warn("request for [ " + name + " ] failed, status=\"" + request.statusText + "\"", funTitle);
        whenFail(request, tag);
        return whenEnd(request, tag);
      };
      aSuccess = function(){
        info("request for [ " + name + " ] success", funTitle);
        whenSuccess(request.responseText, request, tag);
        return whenEnd(request, tag);
      };
      readystatechangeHandler = function(){
        var ref$;
        if (request.readyState === 4) {
          if ((ref$ = request.status) === 200 || ref$ === 304) {
            return aSuccess();
          } else {
            return aFailure();
          }
        }
      };
      crossDomain = !!URL.match("//");
      request = function(){
        var i$, ref$, len$, i;
        try {
          return eval("new " + instance.xhrMethod);
        } catch (e$) {}
        for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
          i = ref$[i$];
          try {
            return eval("new " + (instance.xhrMethod = instance.xhrMethods[i]));
          } catch (e$) {}
        }
        throw "This browser does NOT support any AJAX request, aborting...";
        function fn$(){
          var i$, to$, results$ = [];
          for (i$ = !crossDomain + 0, to$ = instance.xhrMethods.length - 1; i$ <= to$; ++i$) {
            results$.push(i$);
          }
          return results$;
        }
      }();
      info("Using " + instance.xhrMethod, funTitle);
      if (instance.hasXDomainRequest) {
        delete instance.xhrMethod;
      }
      if (instance.xhrMethod === 'XDomainRequest') {
        request.onload = aSuccess;
        request.onerror = aFailure;
      } else {
        request.onreadystatechange = readystatechangeHandler;
      }
      request.open("GET", URL, true);
      info("sending [ " + name + " ] ...", funTitle);
      request.send();
      return request;
    };
    reqQueue = instance.reqQueue = function(q, name){
      var reqQueueInstance, funTitle, alreadyOKMsg, noTestMsg, k, exeing, exe, arrangeReqs;
      q == null && (q = []);
      name == null && (name = "reqQueue");
      reqQueueInstance = {};
      funTitle = 'reqQueue';
      alreadyOKMsg = "already pass its test, skipped.";
      noTestMsg = "no test function";
      k = -1;
      exeing = false;
      reqQueueInstance.enqueue = function(req){
        if (k !== -1) {
          throw "reqQueue fired! refused to enqueue.";
        }
        q.push(req);
        return reqQueueInstance;
      };
      reqQueueInstance.fire = function(whenAllComplete){
        var i, r, e;
        whenAllComplete == null && (whenAllComplete = function(){});
        if (k !== -1) {
          throw "reqQueue fired! refused to fire again.";
        }
        k++;
        i = 0;
        if (typeof q[i] !== 'object') {
          warn("A valid reqQueue should be an array, reqQueue:");
          warn(q);
          return false;
        }
        while (r = arrangeReqs(q[i++])) {
          r.reqResult = {};
          try {
            r.reqResult.test = r.reqResult.done = r.test();
          } catch (e$) {
            e = e$;
            r.reqResult.done = false;
            r.reqResult.test = noTestMsg;
          }
          if (!r.reqResult.done) {
            r.reqResult.xhr = XHR(r.url, fn$, fn1$, fn2$, r.type + "|" + r.name, r);
          } else {
            r.reqResult.xhr = alreadyOKMsg;
            r.reqResult.xhrSuccess = alreadyOKMsg;
            info(type + "|" + name + " : " + alreadyOKMsg, funTitle);
          }
        }
        return reqQueueInstance;
        function fn$(data, request, r){
          r.reqResult.data = data;
          r.reqResult.xhrSuccess = true;
          return info(r.type + "|" + r.name + " : data ready!", funTitle);
        }
        function fn1$(request, r){
          r.reqResult.data = false;
          r.reqResult.xhrSuccess = false;
          return warn(r.type + "|" + r.name + " : fail to get data!", funTitle);
        }
        function fn2$(request, r){
          var exeing;
          r.reqResult.done = true;
          if (k < q.length && !exeing) {
            exeing = true;
            exe();
            return exeing = false;
          }
        }
      };
      exe = function(){
        var r, type, name, reqResult, e;
        r = q[k];
        type = r.type;
        name = r.name;
        reqResult = r.reqResult;
        try {
          if (!reqResult.done) {
            return false;
          }
        } catch (e$) {
          e = e$;
          return false;
        }
        if (reqResult.hasContent = typeof reqResult.data === 'string') {
          info(type + "|" + name + " : start to process data...", funTitle);
          reqResult.typeResult = typeProcessor[r.type](reqResult.data, r.name);
          reqResult.typeProcess = reqResult.typeResult !== failSignal;
        }
        if (!reqResult.test && reqResult.test !== noTestMsg) {
          info(type + "|" + name + " : start to test...", funTitle);
          reqResult.test = r.test();
        }
        info(type + "|" + name + " : xhrSuccess:" + reqResult.xhrSuccess + ", test:" + reqResult.test + ", typeProcess:" + reqResult.typeProcess, funTitle);
        if (reqResult.xhrSuccess && reqResult.test && reqResult.typeProcess) {
          if (reqResult.hasContent) {
            info(type + "|" + name + " : calling success:function(precessData) ...");
            r.success(reqResult.typeResult, reqResult);
          } else {
            info(type + "|" + name + " : calling success:function(reqResult) ...");
            r.success(reqResult);
          }
        } else {
          warn(type + "|" + name + " : calling fail:function(reqResult) ...");
          r.fail(reqResult);
        }
        if (++k >= q.length) {
          return true;
        }
        return exe();
      };
      arrangeReqs = function(req){
        var url;
        if (typeof req !== 'object') {
          if (typeof req !== 'undefined') {
            warn("There is an invalid req! A valid req should be an object, this req:", funTitle);
            warn(req);
          }
          return false;
        }
        if (typeof req.url !== 'string') {
          warn("There is an invalid req objet! A valid req object should at least contains url property, this req:", funTitle);
          warn(r);
          return false;
        }
        if (typeof req.fail !== 'function') {
          req.fail = function(){};
        }
        if (typeof req.success !== 'function') {
          req.success = function(){};
        }
        if (!(req.type in typeProcessor)) {
          req.type = 'unknown';
        }
        url = req.url;
        if (typeof req.name !== 'string') {
          req.name = "@" + url;
        }
        return req;
      };
      return reqQueueInstance;
    };
    instance.start = function(){
      var funTitle, process, k, ref$, q, tmp;
      funTitle = 'start';
      info("Req started", funTitle);
      process = 0;
      for (k in ref$ = reqs) {
        q = ref$[k];
        process++;
        info("reqQueue|" + k + " : starting to process ...", funTitle);
        tmp = new reqQueue(q, k);
        tmp.fire(fn$);
      }
      return instance;
      function fn$(){
        if (--process <= 0) {
          return whenCompleteAllReq();
        }
      }
    };
    if (!dontFireAtOnce) {
      instance.start();
    }
    info("Req instance:");
    info(instance);
    return instance;
  };
  function deepEq$(x, y, type){
    var toString = {}.toString, hasOwnProperty = {}.hasOwnProperty,
        has = function (obj, key) { return hasOwnProperty.call(obj, key); };
    var first = true;
    return eq(x, y, []);
    function eq(a, b, stack) {
      var className, length, size, result, alength, blength, r, key, ref, sizeB;
      if (a == null || b == null) { return a === b; }
      if (a.__placeholder__ || b.__placeholder__) { return true; }
      if (a === b) { return a !== 0 || 1 / a == 1 / b; }
      className = toString.call(a);
      if (toString.call(b) != className) { return false; }
      switch (className) {
        case '[object String]': return a == String(b);
        case '[object Number]':
          return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
        case '[object Date]':
        case '[object Boolean]':
          return +a == +b;
        case '[object RegExp]':
          return a.source == b.source &&
                 a.global == b.global &&
                 a.multiline == b.multiline &&
                 a.ignoreCase == b.ignoreCase;
      }
      if (typeof a != 'object' || typeof b != 'object') { return false; }
      length = stack.length;
      while (length--) { if (stack[length] == a) { return true; } }
      stack.push(a);
      size = 0;
      result = true;
      if (className == '[object Array]') {
        alength = a.length;
        blength = b.length;
        if (first) { 
          switch (type) {
          case '===': result = alength === blength; break;
          case '<==': result = alength <= blength; break;
          case '<<=': result = alength < blength; break;
          }
          size = alength;
          first = false;
        } else {
          result = alength === blength;
          size = alength;
        }
        if (result) {
          while (size--) {
            if (!(result = size in a == size in b && eq(a[size], b[size], stack))){ break; }
          }
        }
      } else {
        if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
          return false;
        }
        for (key in a) {
          if (has(a, key)) {
            size++;
            if (!(result = has(b, key) && eq(a[key], b[key], stack))) { break; }
          }
        }
        if (result) {
          sizeB = 0;
          for (key in b) {
            if (has(b, key)) { ++sizeB; }
          }
          if (first) {
            if (type === '<<=') {
              result = size < sizeB;
            } else if (type === '<==') {
              result = size <= sizeB
            } else {
              result = size === sizeB;
            }
          } else {
            first = false;
            result = size === sizeB;
          }
        }
      }
      stack.pop();
      return result;
    }
  }
}).call(this);
